{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DMX HANG TRAM\\\\React Project\\\\Informatika\\\\Tai_Hiep\\\\Finite-State-Machine-Visualizer\\\\src\\\\Components\\\\LeftPanel.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { Component, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ErrorIcon = () => /*#__PURE__*/_jsxDEV(\"svg\", {\n  width: \"46\",\n  height: \"46\",\n  viewBox: \"0 0 46 46\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /*#__PURE__*/_jsxDEV(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M31.2792 37.2599L36.6033 31.9358L27.9517 23.2842L36.6032 14.6327L31.2791 9.30857L22.6276 17.9601L13.9759 9.30841L8.65179 14.6325L17.3035 23.2842L8.65168 31.936L13.9758 37.2601L22.6276 28.6083L31.2792 37.2599Z\",\n    fill: \"white\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n\n_c = ErrorIcon;\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n    color: \"#1c1c1c\"\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: \"#bfbfbf\"\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus, &:hover, &$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  mark: {\n    backgroundColor: \"#bfbfbf\",\n    height: 8,\n    width: 1,\n    marginTop: -3\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: \"currentColor\"\n  }\n});\n\nfunction valuetext(value) {\n  return `${value}`;\n}\n\nfunction RangeSlider(props) {\n  _s();\n\n  const classes = useStyles(); // const [value, setValue] = React.useState(props.defaultValue);\n\n  const handleChange = (event, newValue) => {\n    props.handleChangeValue(newValue); // setValue(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      id: \"range-slider\",\n      gutterBottom: true,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: props.value,\n      onChange: handleChange,\n      valueLabelDisplay: \"auto\",\n      \"aria-labelledby\": \"range-slider\",\n      getAriaValueText: valuetext,\n      min: props.min,\n      step: props.step,\n      max: props.max\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RangeSlider, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = RangeSlider;\n\nfunction SimpleSlider(props) {\n  _s2();\n\n  const classes = useStyles(); // const [value, setValue] = React.useState(props.defaultValue);\n\n  const handleChange = (event, newValue) => {\n    // setValue(newValue);\n    props.handleChangeValue(newValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      id: \"range-slider\",\n      gutterBottom: true,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      value: props.value,\n      onChange: handleChange,\n      valueLabelDisplay: \"auto\",\n      \"aria-labelledby\": \"range-slider\",\n      getAriaValueText: valuetext,\n      min: props.min,\n      step: props.step,\n      max: props.max\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(SimpleSlider, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = SimpleSlider;\n\nconst DescriptionArea = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"information-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.currentState.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: props.currentState.information\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = DescriptionArea;\n\nconst TabSelector = props => {\n  _s3();\n\n  const [selectedTab, setSelectedTab] = useState(\"Sensors\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-options\",\n    children: [\"Sensors\", \"Limits\", \"Internal State\"].map((value, ix) => /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        color: value === selectedTab ? \"#0F0F0F\" : \"#B9B9B9\"\n      },\n      onClick: () => {\n        props.changeTab(value);\n        setSelectedTab(value);\n      },\n      children: value\n    }, ix, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(TabSelector, \"lGcnU3eOVGtdJoBG8dhNZdKGiD4=\");\n\n_c5 = TabSelector;\n\nfunction ToogleSwitch(props) {\n  _s4();\n\n  const [isOpen, changeIsOpen] = useState(props.env.value);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: props.env.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"switch\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        defaultChecked: props.env.value,\n        onChange: () => {\n          props.envChangeBool(props.env.key)(!isOpen);\n          changeIsOpen(!isOpen);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"slider round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(ToogleSwitch, \"3TPTVCwMnIejbQUFWAb1upkpSDs=\");\n\n_c6 = ToogleSwitch;\n\nclass LeftPanel extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isLoaded: false,\n      currentTab: \"Sensors\",\n      errored: false,\n      errorMessage: \"\"\n    };\n\n    this.sensorChange = key => e => {\n      let inputValue = e.target.value;\n      let temp_sensors = Object.assign({}, this.props.sensors);\n      temp_sensors[key].value = inputValue;\n      this.props.machineSetter.sensors(temp_sensors);\n    };\n\n    this.envChange = key => e => {\n      let inputValue = e.target.value;\n      let temp_environment = Object.assign({}, this.props.environment);\n      temp_environment[key].value = inputValue;\n      this.props.machineSetter.environment(temp_environment);\n    };\n\n    this.envChangeBool = key => value => {\n      let temp_environment = Object.assign({}, this.props.environment);\n      temp_environment[key].value = value;\n      this.props.machineSetter.environment(temp_environment);\n    };\n\n    this.limitsChange = key => value => {\n      let temp_sensors = Object.assign({}, this.props.sensors);\n      temp_sensors[key].limit.value = value;\n      this.props.machineSetter.sensors(temp_sensors);\n    };\n\n    this.renderBottomView = () => {\n      switch (this.state.currentTab) {\n        case \"Sensors\":\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sensors\",\n            children: Object.values(this.props.sensors).map((sensor, ix) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"value-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"input-label\",\n                htmlFor: sensor.name,\n                children: sensor.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"\",\n                id: sensor.name,\n                value: sensor.value,\n                onInput: this.sensorChange(sensor.key)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this)]\n            }, `sens${ix}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 11\n          }, this);\n\n        case \"Limits\":\n          return Object.values(this.props.sensors).map((sensor, ix) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide-box\",\n            children: sensor.limit.valueType === \"RANGE\" ? /*#__PURE__*/_jsxDEV(RangeSlider, {\n              value: sensor.limit.value,\n              label: sensor.limit.label,\n              min: sensor.limit.min,\n              max: sensor.limit.max,\n              step: sensor.limit.step,\n              handleChangeValue: this.limitsChange(sensor.key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this) : /*#__PURE__*/_jsxDEV(SimpleSlider, {\n              value: sensor.limit.value,\n              label: sensor.limit.label,\n              min: sensor.limit.min,\n              max: sensor.limit.max,\n              step: sensor.limit.step,\n              handleChangeValue: this.limitsChange(sensor.key)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this)\n          }, `lim${ix}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 11\n          }, this));\n\n        case \"Internal State\":\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"internal-state\",\n            children: Object.values(this.props.environment).map((env, ix) => {\n              if (env.type === \"FLOAT\") return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value-input\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"input-label\",\n                  htmlFor: env.label,\n                  children: env.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"\",\n                  id: env.label,\n                  value: env.value,\n                  onInput: this.envChange(env.key)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 401,\n                  columnNumber: 21\n                }, this)]\n              }, `is${ix}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this);else if (env.type === \"BOOL\") return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"value-input\",\n                children: /*#__PURE__*/_jsxDEV(ToogleSwitch, {\n                  env: env,\n                  envChangeBool: this.envChangeBool\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 11\n          }, this);\n      }\n    };\n  }\n\n  setErrorMessageLoading(message) {}\n\n  loadMachine() {\n    let loadedMachine;\n    let seenList;\n    let machineJson = document.getElementById(\"textarea-json\").value;\n\n    try {\n      loadedMachine = JSON.parse(machineJson);\n    } catch {\n      throw \"Invalid JSON format\";\n    }\n\n    if (!(\"environment\" in loadedMachine) || !(\"sensors\" in loadedMachine) || !(\"states\" in loadedMachine) || !(\"transitions\" in loadedMachine)) throw `Missing fields for finite state machine`;\n    let sensorsSeenList = {};\n    let newSensors = {};\n    loadedMachine.sensors.forEach(sensor => {\n      if (sensorsSeenList[sensor.key]) throw `Duplicate key for sensors: ${sensor.key}`;\n      if (typeof sensor.minValue !== \"number\" || typeof sensor.maxValue !== \"number\") throw `Minimum and maximum values for sensor ${sensor.key} must be real numbers`;\n      if (sensor.minValue >= sensor.maxValue) throw `Maximum value for sensor ${sensor.key} must be strictly greater than the minimum value`;\n      if (!sensor.limit.label) throw `Limit label for sensor ${sensor.key} must be set`;\n      if (!sensor.limit.label) throw `Limit label for sensor ${sensor.key} must be set`;\n      if (typeof sensor.limit.min !== \"number\" || typeof sensor.limit.max !== \"number\") throw `Minimum and maximum limit thresholds for sensor ${sensor.key} must be real numbers`;\n      if (sensor.limit.minValue >= sensor.limit.maxValue) throw `Maximum limit threshold value for sensor ${sensor.key} must be strictly greater than the minimum value`;\n      if (sensor.limit.valueType !== \"NUMBER\" && sensor.limit.valueType !== \"RANGE\" && sensor.limit.valueType !== \"RELATIVE\") throw `Limit value type of sensor ${sensor.key} must either NUMBER, RANGE or RELATIVE`;\n      sensorsSeenList[sensor.key] = true;\n      newSensors[sensor.key] = sensor;\n    });\n    this.props.machineSetter.sensors(newSensors);\n    let envSeenList = {};\n    let newEnv = {};\n    loadedMachine.environment.forEach(env => {\n      if (envSeenList[env.key]) throw `Duplicate key for internal state: ${env.key}`;\n      if (env.type !== \"BOOL\" && env.type !== \"FLOAT\") throw `Type for internal state ${env.key} must be either BOOL or FLOAT`;\n      if (env.type === \"BOOL\" && typeof env.value !== \"boolean\") throw `Value for internal state ${env.key} must be either true or false`;\n\n      if (env.type === \"FLOAT\" && typeof env.value !== \"number\") {\n        throw `Value for internal state ${env.key} must be a real number`;\n      }\n\n      envSeenList[env.key] = true;\n      newEnv[env.key] = env;\n    });\n    this.props.machineSetter.environment(newEnv);\n    let statesSeenList = {};\n    let newStates = {};\n    loadedMachine.states.forEach(st => {\n      if (statesSeenList[st.key]) throw `Duplicate key for states: ${st.key}`;\n      statesSeenList[st.key] = true;\n      newStates[st.key] = st;\n    });\n    this.props.machineSetter.states(newStates);\n    let initialStateSet = false;\n    loadedMachine.states.forEach((st, ix) => {\n      if (st.category === \"Initial\") {\n        if (initialStateSet) throw \"Two initial states detected!\";\n        initialStateSet = true;\n        this.props.machineSetter.initial(st.key);\n      }\n    });\n    let nodeArr = Object.values(newStates).map((state, ix) => {\n      return {\n        key: state.key,\n        name: `Q${state.key}`,\n        color: \"white\",\n        text: \"empty\",\n        category: state.category\n      };\n    });\n    this.props.machineSetter.nodeDataArray(nodeArr);\n    loadedMachine.transitions.forEach(tr => {\n      if (!tr.label) throw `Missing label for transition - node ${tr.from} to node ${tr.to}`;\n      if (!(tr.from in statesSeenList) || !(tr.to in statesSeenList)) throw `Broken link for transition - node ${tr.from} to node ${tr.to}`;\n      tr.dependsOn.forEach(dp => {\n        if (!(dp in sensorsSeenList)) throw `Sensor for key ${dp} was not declared - node ${tr.from} to node ${tr.to}`;\n      });\n      tr.requires.forEach(rq => {\n        if (!(rq.which in envSeenList)) throw `Internal state for key ${rq.which} was not declared - node ${tr.from} to node ${tr.to}`;\n        if (typeof rq.value !== \"boolean\") throw `Internal state for key ${rq.which} must be either true or false - node ${tr.from} to node ${tr.to}`;\n      });\n    });\n    this.props.machineSetter.transitions(loadedMachine.transitions);\n    const transitionGraph = {};\n    loadedMachine.states.forEach(state => transitionGraph[state.key] = {});\n    loadedMachine.transitions.forEach(transition => {\n      transitionGraph[transition.from][transition.to] = {\n        label: transition.label,\n        information: transition.information,\n        dependsOn: transition.dependsOn,\n        requires: transition.requires\n      };\n    });\n    this.props.machineSetter.transitionGraph(transitionGraph);\n    let transitionArr = loadedMachine.transitions.map(transition => {\n      return {\n        from: transition.from,\n        to: transition.to,\n        text: transition.label\n      };\n    });\n    this.props.machineSetter.linkDataArray(transitionArr);\n    this.setState({\n      isLoaded: true,\n      errored: false,\n      errorMessage: \"\"\n    });\n  }\n\n  renderLoader() {\n    if (!this.state.isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"json-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"textarea-json\",\n        cols: \"39\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          try {\n            this.loadMachine();\n          } catch (err) {\n            this.setState({\n              errored: true,\n              errorMessage: err\n            }, () => this.props.machineSetter.resetToInitial());\n          }\n        },\n        children: \"Load machine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }, this);else return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TabSelector, {\n        changeTab: tab => this.setState({\n          currentTab: tab\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }, this), this.renderBottomView()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(DescriptionArea, {\n          currentState: this.props.currentState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"separator-bar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), this.renderLoader()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        style: {\n          display: this.state.errored ? \"flex\" : \"none\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-bubble\",\n          children: /*#__PURE__*/_jsxDEV(ErrorIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LeftPanel;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ErrorIcon\");\n$RefreshReg$(_c2, \"RangeSlider\");\n$RefreshReg$(_c3, \"SimpleSlider\");\n$RefreshReg$(_c4, \"DescriptionArea\");\n$RefreshReg$(_c5, \"TabSelector\");\n$RefreshReg$(_c6, \"ToogleSwitch\");","map":{"version":3,"sources":["C:/Users/DMX HANG TRAM/React Project/Informatika/Tai_Hiep/Finite-State-Machine-Visualizer/src/Components/LeftPanel.jsx"],"names":["React","Component","useState","makeStyles","Typography","Slider","ErrorIcon","useStyles","root","width","color","rail","height","opacity","backgroundColor","thumb","border","marginTop","marginLeft","boxShadow","mark","markActive","valuetext","value","RangeSlider","props","classes","handleChange","event","newValue","handleChangeValue","label","min","step","max","SimpleSlider","DescriptionArea","currentState","name","information","TabSelector","selectedTab","setSelectedTab","map","ix","changeTab","ToogleSwitch","isOpen","changeIsOpen","env","envChangeBool","key","LeftPanel","state","isLoaded","currentTab","errored","errorMessage","sensorChange","e","inputValue","target","temp_sensors","Object","assign","sensors","machineSetter","envChange","temp_environment","environment","limitsChange","limit","renderBottomView","values","sensor","valueType","type","setErrorMessageLoading","message","loadMachine","loadedMachine","seenList","machineJson","document","getElementById","JSON","parse","sensorsSeenList","newSensors","forEach","minValue","maxValue","envSeenList","newEnv","statesSeenList","newStates","states","st","initialStateSet","category","initial","nodeArr","text","nodeDataArray","transitions","tr","from","to","dependsOn","dp","requires","rq","which","transitionGraph","transition","transitionArr","linkDataArray","setState","renderLoader","err","resetToInitial","tab","render","display"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst ErrorIcon = () => (\r\n  <svg\r\n    width=\"46\"\r\n    height=\"46\"\r\n    viewBox=\"0 0 46 46\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      fillRule=\"evenodd\"\r\n      clipRule=\"evenodd\"\r\n      d=\"M31.2792 37.2599L36.6033 31.9358L27.9517 23.2842L36.6032 14.6327L31.2791 9.30857L22.6276 17.9601L13.9759 9.30841L8.65179 14.6325L17.3035 23.2842L8.65168 31.936L13.9758 37.2601L22.6276 28.6083L31.2792 37.2599Z\"\r\n      fill=\"white\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 250,\r\n    color: \"#1c1c1c\",\r\n  },\r\n  rail: {\r\n    height: 2,\r\n    opacity: 0.5,\r\n    backgroundColor: \"#bfbfbf\",\r\n  },\r\n  thumb: {\r\n    height: 24,\r\n    width: 24,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -8,\r\n    marginLeft: -12,\r\n    \"&:focus, &:hover, &$active\": {\r\n      boxShadow: \"inherit\",\r\n    },\r\n  },\r\n  mark: {\r\n    backgroundColor: \"#bfbfbf\",\r\n    height: 8,\r\n    width: 1,\r\n    marginTop: -3,\r\n  },\r\n  markActive: {\r\n    opacity: 1,\r\n    backgroundColor: \"currentColor\",\r\n  },\r\n});\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`;\r\n}\r\n\r\nfunction RangeSlider(props) {\r\n  const classes = useStyles();\r\n  // const [value, setValue] = React.useState(props.defaultValue);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    props.handleChangeValue(newValue);\r\n    // setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"range-slider\" gutterBottom>\r\n        {props.label}\r\n      </Typography>\r\n      <Slider\r\n        value={props.value}\r\n        onChange={handleChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        getAriaValueText={valuetext}\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SimpleSlider(props) {\r\n  const classes = useStyles();\r\n  // const [value, setValue] = React.useState(props.defaultValue);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    // setValue(newValue);\r\n    props.handleChangeValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Typography id=\"range-slider\" gutterBottom>\r\n        {props.label}\r\n      </Typography>\r\n      <Slider\r\n        value={props.value}\r\n        onChange={handleChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        getAriaValueText={valuetext}\r\n        min={props.min}\r\n        step={props.step}\r\n        max={props.max}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst DescriptionArea = (props) => {\r\n  return (\r\n    <div className=\"information-area\">\r\n      <h1>{props.currentState.name}</h1>\r\n      <p>{props.currentState.information}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TabSelector = (props) => {\r\n  const [selectedTab, setSelectedTab] = useState(\"Sensors\");\r\n  return (\r\n    <div className=\"tab-options\">\r\n      {[\"Sensors\", \"Limits\", \"Internal State\"].map((value, ix) => (\r\n        <button\r\n          key={ix}\r\n          style={{ color: value === selectedTab ? \"#0F0F0F\" : \"#B9B9B9\" }}\r\n          onClick={() => {\r\n            props.changeTab(value);\r\n            setSelectedTab(value);\r\n          }}\r\n        >\r\n          {value}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ToogleSwitch(props) {\r\n  const [isOpen, changeIsOpen] = useState(props.env.value);\r\n  return (\r\n    <React.Fragment>\r\n      <span>{props.env.label}</span>\r\n      <label className=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          defaultChecked={props.env.value}\r\n          onChange={() => {\r\n            props.envChangeBool(props.env.key)(!isOpen);\r\n            changeIsOpen(!isOpen);\r\n          }}\r\n        />\r\n        <span className=\"slider round\"></span>\r\n      </label>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nclass LeftPanel extends Component {\r\n  state = {\r\n    isLoaded: false,\r\n    currentTab: \"Sensors\",\r\n    errored: false,\r\n    errorMessage: \"\",\r\n  };\r\n\r\n  setErrorMessageLoading(message) {}\r\n\r\n  loadMachine() {\r\n    let loadedMachine;\r\n    let seenList;\r\n    let machineJson = document.getElementById(\"textarea-json\").value;\r\n    try {\r\n      loadedMachine = JSON.parse(machineJson);\r\n    } catch {\r\n      throw \"Invalid JSON format\";\r\n    }\r\n\r\n    if (\r\n      !(\"environment\" in loadedMachine) ||\r\n      !(\"sensors\" in loadedMachine) ||\r\n      !(\"states\" in loadedMachine) ||\r\n      !(\"transitions\" in loadedMachine)\r\n    )\r\n      throw `Missing fields for finite state machine`;\r\n\r\n    let sensorsSeenList = {};\r\n    let newSensors = {};\r\n    loadedMachine.sensors.forEach((sensor) => {\r\n      if (sensorsSeenList[sensor.key])\r\n        throw `Duplicate key for sensors: ${sensor.key}`;\r\n      if (\r\n        typeof sensor.minValue !== \"number\" ||\r\n        typeof sensor.maxValue !== \"number\"\r\n      )\r\n        throw `Minimum and maximum values for sensor ${sensor.key} must be real numbers`;\r\n      if (sensor.minValue >= sensor.maxValue)\r\n        throw `Maximum value for sensor ${sensor.key} must be strictly greater than the minimum value`;\r\n      if (!sensor.limit.label)\r\n        throw `Limit label for sensor ${sensor.key} must be set`;\r\n      if (!sensor.limit.label)\r\n        throw `Limit label for sensor ${sensor.key} must be set`;\r\n      if (\r\n        typeof sensor.limit.min !== \"number\" ||\r\n        typeof sensor.limit.max !== \"number\"\r\n      )\r\n        throw `Minimum and maximum limit thresholds for sensor ${sensor.key} must be real numbers`;\r\n      if (sensor.limit.minValue >= sensor.limit.maxValue)\r\n        throw `Maximum limit threshold value for sensor ${sensor.key} must be strictly greater than the minimum value`;\r\n      if (\r\n        sensor.limit.valueType !== \"NUMBER\" &&\r\n        sensor.limit.valueType !== \"RANGE\" &&\r\n        sensor.limit.valueType !== \"RELATIVE\"\r\n      )\r\n        throw `Limit value type of sensor ${sensor.key} must either NUMBER, RANGE or RELATIVE`;\r\n\r\n      sensorsSeenList[sensor.key] = true;\r\n      newSensors[sensor.key] = sensor;\r\n    });\r\n    this.props.machineSetter.sensors(newSensors);\r\n\r\n    let envSeenList = {};\r\n    let newEnv = {};\r\n    loadedMachine.environment.forEach((env) => {\r\n      if (envSeenList[env.key])\r\n        throw `Duplicate key for internal state: ${env.key}`;\r\n      if (env.type !== \"BOOL\" && env.type !== \"FLOAT\")\r\n        throw `Type for internal state ${env.key} must be either BOOL or FLOAT`;\r\n      if (env.type === \"BOOL\" && typeof env.value !== \"boolean\")\r\n        throw `Value for internal state ${env.key} must be either true or false`;\r\n      if (env.type === \"FLOAT\" && typeof env.value !== \"number\") {\r\n        throw `Value for internal state ${env.key} must be a real number`;\r\n      }\r\n\r\n      envSeenList[env.key] = true;\r\n      newEnv[env.key] = env;\r\n    });\r\n    this.props.machineSetter.environment(newEnv);\r\n\r\n    let statesSeenList = {};\r\n    let newStates = {};\r\n    loadedMachine.states.forEach((st) => {\r\n      if (statesSeenList[st.key]) throw `Duplicate key for states: ${st.key}`;\r\n      statesSeenList[st.key] = true;\r\n      newStates[st.key] = st;\r\n    });\r\n    this.props.machineSetter.states(newStates);\r\n\r\n    let initialStateSet = false;\r\n    loadedMachine.states.forEach((st, ix) => {\r\n      if (st.category === \"Initial\") {\r\n        if (initialStateSet) throw \"Two initial states detected!\";\r\n        initialStateSet = true;\r\n        this.props.machineSetter.initial(st.key);\r\n      }\r\n    });\r\n\r\n    let nodeArr = Object.values(newStates).map((state, ix) => {\r\n      return {\r\n        key: state.key,\r\n        name: `Q${state.key}`,\r\n        color: \"white\",\r\n        text: \"empty\",\r\n        category: state.category,\r\n      };\r\n    });\r\n    this.props.machineSetter.nodeDataArray(nodeArr);\r\n\r\n    loadedMachine.transitions.forEach((tr) => {\r\n      if (!tr.label)\r\n        throw `Missing label for transition - node ${tr.from} to node ${tr.to}`;\r\n\r\n      if (!(tr.from in statesSeenList) || !(tr.to in statesSeenList))\r\n        throw `Broken link for transition - node ${tr.from} to node ${tr.to}`;\r\n      tr.dependsOn.forEach((dp) => {\r\n        if (!(dp in sensorsSeenList))\r\n          throw `Sensor for key ${dp} was not declared - node ${tr.from} to node ${tr.to}`;\r\n      });\r\n      tr.requires.forEach((rq) => {\r\n        if (!(rq.which in envSeenList))\r\n          throw `Internal state for key ${rq.which} was not declared - node ${tr.from} to node ${tr.to}`;\r\n        if (typeof rq.value !== \"boolean\")\r\n          throw `Internal state for key ${rq.which} must be either true or false - node ${tr.from} to node ${tr.to}`;\r\n      });\r\n    });\r\n    this.props.machineSetter.transitions(loadedMachine.transitions);\r\n    const transitionGraph = {};\r\n    loadedMachine.states.forEach((state) => (transitionGraph[state.key] = {}));\r\n\r\n    loadedMachine.transitions.forEach((transition) => {\r\n      transitionGraph[transition.from][transition.to] = {\r\n        label: transition.label,\r\n        information: transition.information,\r\n        dependsOn: transition.dependsOn,\r\n        requires: transition.requires,\r\n      };\r\n    });\r\n    this.props.machineSetter.transitionGraph(transitionGraph);\r\n\r\n    let transitionArr = loadedMachine.transitions.map((transition) => {\r\n      return {\r\n        from: transition.from,\r\n        to: transition.to,\r\n        text: transition.label,\r\n      };\r\n    });\r\n    this.props.machineSetter.linkDataArray(transitionArr);\r\n\r\n    this.setState({ isLoaded: true, errored: false, errorMessage: \"\" });\r\n  }\r\n\r\n  sensorChange = (key) => (e) => {\r\n    let inputValue = e.target.value;\r\n    let temp_sensors = Object.assign({}, this.props.sensors);\r\n    temp_sensors[key].value = inputValue;\r\n    this.props.machineSetter.sensors(temp_sensors);\r\n  };\r\n\r\n  envChange = (key) => (e) => {\r\n    let inputValue = e.target.value;\r\n    let temp_environment = Object.assign({}, this.props.environment);\r\n    temp_environment[key].value = inputValue;\r\n    this.props.machineSetter.environment(temp_environment);\r\n  };\r\n\r\n  envChangeBool = (key) => (value) => {\r\n    let temp_environment = Object.assign({}, this.props.environment);\r\n    temp_environment[key].value = value;\r\n    this.props.machineSetter.environment(temp_environment);\r\n  };\r\n\r\n  limitsChange = (key) => (value) => {\r\n    let temp_sensors = Object.assign({}, this.props.sensors);\r\n    temp_sensors[key].limit.value = value;\r\n    this.props.machineSetter.sensors(temp_sensors);\r\n  };\r\n\r\n  renderBottomView = () => {\r\n    switch (this.state.currentTab) {\r\n      case \"Sensors\":\r\n        return (\r\n          <div className=\"sensors\">\r\n            {Object.values(this.props.sensors).map((sensor, ix) => (\r\n              <div className=\"value-input\" key={`sens${ix}`}>\r\n                <label className=\"input-label\" htmlFor={sensor.name}>\r\n                  {sensor.name}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"\"\r\n                  id={sensor.name}\r\n                  value={sensor.value}\r\n                  onInput={this.sensorChange(sensor.key)}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        );\r\n\r\n      case \"Limits\":\r\n        return Object.values(this.props.sensors).map((sensor, ix) => (\r\n          <div key={`lim${ix}`} className=\"slide-box\">\r\n            {sensor.limit.valueType === \"RANGE\" ? (\r\n              <RangeSlider\r\n                value={sensor.limit.value}\r\n                label={sensor.limit.label}\r\n                min={sensor.limit.min}\r\n                max={sensor.limit.max}\r\n                step={sensor.limit.step}\r\n                handleChangeValue={this.limitsChange(sensor.key)}\r\n              />\r\n            ) : (\r\n              <SimpleSlider\r\n                value={sensor.limit.value}\r\n                label={sensor.limit.label}\r\n                min={sensor.limit.min}\r\n                max={sensor.limit.max}\r\n                step={sensor.limit.step}\r\n                handleChangeValue={this.limitsChange(sensor.key)}\r\n              />\r\n            )}\r\n          </div>\r\n        ));\r\n\r\n      case \"Internal State\":\r\n        return (\r\n          <div className=\"internal-state\">\r\n            {Object.values(this.props.environment).map((env, ix) => {\r\n              if (env.type === \"FLOAT\")\r\n                return (\r\n                  <div className=\"value-input\" key={`is${ix}`}>\r\n                    <label className=\"input-label\" htmlFor={env.label}>\r\n                      {env.label}\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"\"\r\n                      id={env.label}\r\n                      value={env.value}\r\n                      onInput={this.envChange(env.key)}\r\n                    />\r\n                  </div>\r\n                );\r\n              else if (env.type === \"BOOL\")\r\n                return (\r\n                  <div className=\"value-input\">\r\n                    <ToogleSwitch\r\n                      env={env}\r\n                      envChangeBool={this.envChangeBool}\r\n                    />\r\n                  </div>\r\n                );\r\n            })}\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  renderLoader() {\r\n    if (!this.state.isLoaded)\r\n      return (\r\n        <div className=\"json-input\">\r\n          <textarea id=\"textarea-json\" cols=\"39\"></textarea>\r\n          <button\r\n            onClick={() => {\r\n              try {\r\n                this.loadMachine();\r\n              } catch (err) {\r\n                this.setState(\r\n                  {\r\n                    errored: true,\r\n                    errorMessage: err,\r\n                  },\r\n                  () => this.props.machineSetter.resetToInitial()\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            Load machine\r\n          </button>\r\n        </div>\r\n      );\r\n    else\r\n      return (\r\n        <React.Fragment>\r\n          <TabSelector\r\n            changeTab={(tab) => this.setState({ currentTab: tab })}\r\n          />\r\n          {this.renderBottomView()}\r\n        </React.Fragment>\r\n      );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"left-panel\">\r\n          <DescriptionArea currentState={this.props.currentState} />\r\n          <div className=\"separator-bar\" />\r\n          {this.renderLoader()}\r\n        </div>\r\n        <div\r\n          className=\"error-container\"\r\n          style={{ display: this.state.errored ? \"flex\" : \"none\" }}\r\n        >\r\n          <div className=\"error-message\">{this.state.errorMessage}</div>\r\n          <div className=\"error-bubble\">\r\n            <ErrorIcon />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeftPanel;\r\n"]},"metadata":{},"sourceType":"module"}